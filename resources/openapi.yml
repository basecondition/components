swagger: "2.0"
info:
  title: BSC API
  description: BSC API
  version: 0.0.1
host: chekov.basecondition.bsc
basePath: /api/v1
tags:
  - name: heartbeat
    description: API heartbeat for health monitoring
  - name: token
    description: OAuth2 token and refresh token
  - name: registration
    description: member registration
  - name: password
    description: password reset
  - name: member
    description: member management
  - name: milestone
    description: milestone management
  - name: timeline
    description: member timeline
  - name: event
    description: event stuff
  - name: message
    description: message / chat system
  - name: notification
    description: notification system
  - name: consulting
    description: consulting dates
  - name: article
    description: redaxo articles
  - name: structure
    description: general structure (no token required)
schemes:
  - https
paths:
  /heartbeat:
    get:
      tags:
        - heartbeat
      summary: API heartbeat
      description: Get API heartbeat
      operationId: getHeartbeat
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        204:
          description: All is fine
#      security:
#        - oAuth2: []
  /token:
    post:
      tags:
        - token
      summary: OAuth2 authorization
      description: Get user token or refreshtoken
      operationId: token
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/tokenOrder'
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        400:
          $ref: '#/responses/400'
        200:
          description: success_authorize
          schema:
            $ref: '#/definitions/token'
  /logout:
    get:
      tags:
        - token
      summary: Disable Token
      description: Logout and disable token
      operationId: logout
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: successful logged out
          schema:
            $ref: '#/definitions/success'
      security:
        - oAuth2: []
  /logged_in:
    get:
      tags:
        - token
      summary: Check Token status
      description: Is token expiered
      operationId: isloggedIn
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        400:
          $ref: '#/responses/400'
        200:
          description: get token status
          schema:
            $ref: '#/definitions/success'
      security:
        - oAuth2: [read]
  /register:
    post:
      tags:
        - registration
      summary: Member registration
      description: Register an new member
      operationId: createMember
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/memberRegister'
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        400:
          $ref: '#/responses/400'
        201:
          description: Member successful registered
      security:
        - apiKey: []
  /register/verify:
    post:
      tags:
        - registration
      summary: Verify registration tan
      description: To verify email sended verify tan
      operationId: verifyMember
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/registerVerify'
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        400:
          $ref: '#/responses/400'
        200:
          description: Verify tan response
          schema:
            $ref: '#/definitions/success'
      security:
        - apiKey: []
  /register/resend:
    post:
      tags:
        - registration
      summary: Send verify tan
      description: To send verify tan via email
      operationId: resendVerifyTan
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/registerResend'
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        201:
          description: Verify tan was sended
      security:
        - apiKey: []
  /member:
    get:
      tags:
        - member
      summary: Get member by token
      description: Get member
      operationId: getMemberByToken
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: get member
          schema:
            $ref: '#/definitions/member'
      security:
        - oAuth2: []
    patch:
      tags:
        - member
      summary: Update member account
      description: Change member account informations
      operationId: updateMemberByToken
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/memberPatch'
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        400:
          $ref: '#/responses/400'
        204:
          description: Member successful updated
      security:
        - oAuth2: []
    delete:
      tags:
        - member
      summary: Delete member by token
      description: Delete member
      operationId: deleteMember
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        204:
          description: member deleted
      security:
        - oAuth2: []
  /member/delete_by_email:
    get:
      tags:
        - member
      summary: Delete member by email
      description: Delete member
      operationId: deleteMemberByEmail
      parameters:
        - in: query
          name: email
          type: string
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        400:
          $ref: '#/responses/400'
        204:
          description: member deleted
      security:
        - oAuth2: []
  /member/password:
    patch:
      tags:
        - member
      summary: Set new password (when logged in)
      description: Set new password (when logged in)
      operationId: setPassword
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/memberPassword'
      responses:
        500:
          $ref: '#/responses/500'
        400:
          $ref: '#/responses/400'
        204:
          description: set password successful
      security:
        - oAuth2: []
  /member/milestones:
    get:
      tags:
        - milestone
      summary: Get member milestones by token
      description: Member milestones
      operationId: getMemberMilestones
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: Member milestones
          schema:
            type: array
            items:
              $ref: '#/definitions/milestone'
      security:
        - oAuth2: []
  /member/milestone:
    post:
      tags:
        - milestone
      summary: Create a member milestone
      description: Member milestone create
      operationId: createMilestone
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/milestoneCreate'
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        400:
          $ref: '#/responses/400'
        201:
          description: Milestone created
      security:
        - oAuth2: []
  /member/milestone/{id}:
    get:
      tags:
        - milestone
      summary: Get member milestone by id
      description: Get Member milestone
      operationId: getMemberMilestone
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        403:
          $ref: '#/responses/403'
        401:
          $ref: '#/responses/401'
        200:
          description: Member milestones
          schema:
            $ref: '#/definitions/milestone'
      security:
        - oAuth2: []
    patch:
      tags:
        - milestone
      summary: Update a member milestone
      description: Member milestone update
      operationId: updateMilestone
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/milestonePatch'
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        403:
          $ref: '#/responses/403'
        401:
          $ref: '#/responses/401'
        400:
          $ref: '#/responses/400'
        204:
          description: Milestone updated
      security:
        - oAuth2: []
    delete:
      tags:
        - milestone
      summary: Delete member milestones by id
      description: Delete member milestone
      operationId: deleteMemberMilestoneById
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        403:
          $ref: '#/responses/403'
        401:
          $ref: '#/responses/401'
        204:
          description: Member milestone deleted
      security:
        - oAuth2: []
  /member/timeline:
    get:
      tags:
        - timeline
      summary: Get member timeline sorted descending
      description: Get member timeline sorted descending
      operationId: timeline
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: member timeline
          schema:
            type: array
            items: {}
            description: mixed content (milestones, events, consulting dates ordered by timestamp)
      security:
        - oAuth2: []
  /member/checkins:
    get:
      tags:
        - member
      summary: Get todays checkin log
      description: todays checkin log
      operationId: getCheckinLog
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: todays checkin log
          schema:
            type: array
            items:
              $ref: '#/definitions/checkinlog'
      security:
        - oAuth2: []
  /member/timesheet:
    get:
      tags:
        - member
      summary: Get current semesters obligable events data (time sheet)
      description: current semesters obligable events data (time sheet)
      operationId: getTimeSheet
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: current semesters obligable events data (time sheet)
          schema:
            type: array
            items:
              $ref: '#/definitions/timesheet'
      security:
        - oAuth2: []
  /message:
    post:
      tags:
        - message
      summary: Send message
      description: Send message
      operationId: sendMessage
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: Message sent successfully (returns new conversation ID)
          schema:
            $ref: '#/definitions/messageSend'
      security:
        - oAuth2: []
  /message/{id}:
    post:
      tags:
        - message
      summary: Reply to a conversation
      description: Reply to a conversation ({id} = conversation (root) id)
      operationId: sendReply
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        403:
          $ref: '#/responses/403'
        401:
          $ref: '#/responses/401'
        201:
          description: Reply sent successfully (returns new reply ID)
          schema:
            $ref: '#/definitions/messageSend'
      security:
        - oAuth2: []
    get:
      tags:
        - message
      summary: Get conversation and all replies
      description: Get conversation and all replies
      operationId: getConversation
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: conversation
          schema:
            $ref: '#/definitions/messageGet'
      security:
        - oAuth2: []
  /message/read/{id}:
    patch:
      tags:
        - message
      summary: Mark conversation with id={id} read (including all replies send from BTU)
      description: Mark conversation with id={id} read (including all replies send from BTU)
      operationId: markConversationRead
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        201:
          description: Successfully marked as read
          schema:
            $ref: '#/definitions/messageRead'
      security:
        - oAuth2: []
  /messages:
    get:
      tags:
        - message
      summary: Get conversations (root messages)
      description: Get conversations (root messages)
      operationId: getConversations
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: conversations order by date descending (including replies dates)
          schema:
            $ref: '#/definitions/messageConversations'
      security:
        - oAuth2: []
  /messages/unread:
    get:
      tags:
        - message
      summary: Get number of unread conversations
      description: Get number of unread conversations
      operationId: getUnreadConversations
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: unread conversations count
          schema:
            $ref: '#/definitions/messagesUnread'
      security:
        - oAuth2: []
  /notifications:
    get:
      tags:
        - notification
      summary: Get unread notifications
      description: Get unread notifications
      operationId: getNotifications
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: unread notifications in order (date DESC)
          schema:
            $ref: '#/definitions/notifications'
      security:
        - oAuth2: []
  /notification/read/{id}:
    patch:
      tags:
        - notification
      summary: Mark notification with id={id} read
      description: Mark notification with id={id} read
      operationId: markNotificationRead
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        400:
          $ref: '#/responses/400'
        200:
          description: Successfully marked as read
          schema:
            $ref: '#/definitions/notificationRead'
      security:
        - oAuth2: []
  /notifications/unread:
    get:
      tags:
        - notification
      summary: Get number of unread notifications
      description: Get number of unread notifications
      operationId: getUnreadNotifications
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: unread notifications count
          schema:
            $ref: '#/definitions/notificationsUnread'
      security:
        - oAuth2: []
  /consulting:
    get:
      tags:
        - consulting
      summary: Get consulting bubbles and content
      description: Get consulting bubbles and content
      operationId: getOverview
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: consulting bubbles and content
          schema:
            type: array
            items:
              $ref: '#/definitions/consultingOverview'
      security:
        - oAuth2: []
    post:
      tags:
        - consulting
      summary: Submit new consulting entry
      description: Submit new consulting entry
      operationId: addDate
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        201:
          description: submit success
          schema:
            $ref: '#/definitions/consultingDateAdd'
      security:
        - oAuth2: []
  /consulting/{id}:
    get:
      tags:
        - consulting
      summary: get existing consulting entry
      description: get existing consulting entry
      operationId: getDate
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        204:
          description: submit success
          schema:
            $ref: '#/definitions/consultingDateGet'
      security:
        - oAuth2: []
    patch:
      tags:
        - consulting
      summary: update existing consulting entry
      description: update existing consulting entry
      operationId: updateDate
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        403:
          $ref: '#/responses/403'
        401:
          $ref: '#/responses/401'
        400:
          $ref: '#/responses/400'
        204:
          description: update success
          schema:
            $ref: '#/definitions/consultingDateAdd'
      security:
        - oAuth2: []
    delete:
      tags:
        - consulting
      summary: delete existing consulting entry
      description: delete existing consulting entry
      operationId: deleteDate
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        403:
          $ref: '#/responses/403'
        400:
          $ref: '#/responses/400'
        204:
          description: update success
      security:
        - oAuth2: []
  /password/reset:
    post:
      tags:
        - password
      summary: Send reset password mail
      description: Reset password mailing
      operationId: passwordReset
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/resetPassword'
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        400:
          $ref: '#/responses/400'
        201:
          description: reset password mail sended
      security:
        - apiKey: []
  /password/reset/set:
    post:
      tags:
        - password
      summary: Set new password
      description: Set new password
      operationId: passwordResetSet
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/setResetPassword'
      responses:
        500:
          $ref: '#/responses/500'
        400:
          $ref: '#/responses/400'
        201:
          description: set password successful
      security:
        - apiKey: []
  /types:
    get:
      tags:
        - milestone
      summary: Get type list to retrieve ids (used in milestone endpoints)
      description: Get type list to retrieve ids (used in milestone endpoints)
      operationId: memberTypes
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        200:
          description: member types
          schema:
            type: array
            items:
              $ref: '#/definitions/memberTypes'
  /dictionary:
    get:
      tags:
        - structure
      summary: returns recursive list of translations
      description: returns recursive list of translations
      parameters:
        - in: query
          name: filter
          type: string
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        200:
          description: returns recursive translations json
          schema:
            $ref: '#/definitions/dictionary'
  /structure/events:
    get:
      tags:
        - structure
      summary: get main event categories
      description: get main event categories
      operationId: getEventMainCategories
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: returns list of events
          schema:
            type: array
            items:
              $ref: '#/definitions/eventCategories'
  /structure/milestones:
    get:
      tags:
        - structure
      summary: returns recursive build of milestone fields overall structure
      description: returns recursive build of milestone fields overall structure
      operationId: getMilestoneStructure
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        200:
          description: returns recursive build of milestone fields overall structure
  /code:
    post:
      tags:
        - event
      summary: submit booking code
      description: submit booking code for events and pathes and receiver according tree
      operationId: submitCode
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/code'
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: tree of activated events or tags
          schema:
            type: object
      security:
        - oAuth2: []
  /event/{id}:
    get:
      tags:
        - event
      summary: get single event data
      description: get single event data
      operationId: getEvent
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      responses:
        500:
          $ref: '#/responses/500'
        403:
          $ref: '#/responses/403'
        401:
          $ref: '#/responses/401'
        400:
          $ref: '#/responses/400'
        200:
          description: returns detailed event information
          schema:
            type: object
            items:
              $ref: '#/definitions/event'
      security:
        - oAuth2: []
  /events/available:
    get:
      tags:
        - event
      summary: return active events
      description: return active events
      operationId: getAvailableEvents
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        200:
          description: returns list of events
          schema:
            type: array
            items:
              $ref: '#/definitions/event'
      security:
        - oAuth2: []
  /events/subscribe/{id}:
    post:
      tags:
        - event
      summary: subscribe to specified event
      description: subscribe to specified event
      operationId: subscribe
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        400:
          $ref: '#/responses/400'
        200:
          description: returns detailed event information on success
          schema:
            type: object
            items:
              $ref: '#/definitions/event'
      security:
        - oAuth2: []
  /events/unsubscribe/{id}:
    post:
      tags:
        - event
      summary: unsubscribe from specified event
      description: unsubscribe to specified event
      operationId: unsubscribe
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        400:
          $ref: '#/responses/400'
        200:
          description: returns detailed event information on success
          schema:
            type: object
            items:
              $ref: '#/definitions/event'
      security:
        - oAuth2: []
  /events/hide/{id}:
    patch:
      tags:
        - event
      summary: hide specified event (app user)
      description: hide specified event (app user)
      operationId: hide
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        400:
          $ref: '#/responses/400'
        204:
          description: hide success
      security:
        - oAuth2: []
  /events/unhide/{id}:
    patch:
      tags:
        - event
      summary: remove hide state from specified event (app user)
      description: remove hide state from specified event (app user)
      operationId: unhide
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
      responses:
        500:
          $ref: '#/responses/500'
        401:
          $ref: '#/responses/401'
        400:
          $ref: '#/responses/400'
        204:
          description: hide success
      security:
        - oAuth2: []
  /article/{id}:
    get:
      tags:
        - article
      summary: return redaxo article
      description: return redaxo article
      operationId: getArticle
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          format: "int64"
        - in: query
          name: clang
          type: integer
          required: false
          format: "int64"
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/500'
        403:
          $ref: '#/responses/403'
        401:
          $ref: '#/responses/401'
        200:
          description: returns article
          schema:
            $ref: '#/definitions/article'
      security:
        - oAuth2: []

securityDefinitions:
  basicAuth:
    type: basic
  apiKey:
    type: apiKey
    in: header
    name: X-API-Key
  oAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://chekov.basecondition.bsc/api/v1/token
    tokenUrl: https://chekov.basecondition.bsc/api/v1/token
    scopes:
      read: Erlaubt das Lesen von Daten oder Ressourcen.
      write: Ermöglicht das Schreiben, Aktualisieren oder Löschen von Daten oder Ressourcen.
      delete: Erlaubt das Löschen von Daten oder Ressourcen.
      update: Ermöglicht das Aktualisieren von Daten oder Ressourcen.
      create: Erlaubt das Erstellen neuer Daten oder Ressourcen.
      admin: Full grants access to administrative data or ressources

responses:
  500:
    description: internal_server_error
    schema:
      $ref: '#/definitions/error'
  405:
    description: method_not_allowed
    schema:
      $ref: '#/definitions/error'
  404:
    description: not_found
    schema:
      $ref: '#/definitions/error'
  403:
    description: forbidden
    schema:
      $ref: '#/definitions/error'
  401:
    description: invalid_token
    schema:
      $ref: '#/definitions/error'
  400:
    description: invalid_request
    schema:
      $ref: '#/definitions/error'

definitions:
  error:
    type: object
    properties:
      error:
        type: string
      error_description:
        type: string
  success:
    type: object
    properties:
      result:
        type: boolean
      success:
        type: string
      success_description:
        type: string
  tokenOrder:
    type: object
    properties:
      grant_type:
        type: string
        enum:
          - password
          - refresh_token
      client_id:
        type: string
      client_secret:
        type: string
      refresh_token:
        type: string
      username:
        type: string
      password:
        type: string
    required:
      - grant_type
      - client_id
      - client_secret
  token:
    type: object
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      token_type:
        type: string
        enum:
          - Bearer
      scope:
        type: string
      refresh_token:
        type: string
      type:
        type: integer
  memberRegister:
    type: object
    properties:
      firstname:
        type: string
      name:
        type: string
      email:
        type: string
      password:
        type: string
      gender:
        type: string
        enum:
          - male
          - female
          - none
      birthday:
        type: string
      zipcode:
        type: string
      place:
        type: string
      country:
        type: string
      termsofuse_science_accepted:
        type: boolean
        default: null
      language:
        type: string
    required:
      - firstname
      - name
      - email
      - password
      - gender
      - birthday
      - zipcode
      - place
  registerVerify:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
      tan:
        type: string
    required:
      - email
      - tan
  registerResend:
    type: object
    properties:
      email:
        type: string
    required:
      - email
  resetPassword:
    type: object
    properties:
      email:
        type: string
    required:
      - email
  setResetPassword:
    type: object
    properties:
      email:
        type: string
      password_reset_key:
        type: string
      password:
        type: string
    required:
      - email
      - password
      - password_reset_key
  member:
    type: object
    properties:
      id:
        type: integer
        format: int64
      education_id:
        type: string
      firstname:
        type: string
      name:
        type: string
      email:
        type: string
      gender:
        type: string
        enum:
          - male
          - female
          - none
      birthday:
        type: string
      zipcode:
        type: string
      place:
        type: string
      state:
        type: string
      country:
        type: string
      language:
        type: string
      last_milestone_action:
        type: string
      status:
        type: string
      login_tries:
        type: integer
      termsofuse_science_accepted:
        type: boolean
        default: null
  memberPatch:
    type: object
    properties:
      firstname:
        type: string
      name:
        type: string
      email:
        type: string
      gender:
        type: string
        enum:
          - male
          - female
          - none
      zipcode:
        type: string
      place:
        type: string
      country:
        type: string
      termsofuse_science_accepted:
        type: boolean
  memberPassword:
    type: object
    properties:
      password:
        type: string
  milestone:
    type: object
    properties:
      id:
        type: integer
        format: int64
      type:
        type: integer
        format: int64
      status_from:
        type: string
      status_until:
        type: string
      school_type:
        type: string
      school_name:
        type: string
      school_location:
        type: string
      school_grade:
        type: integer
        format: int64
      school_graduation:
        type: string
      school_after:
        type: string
      university_course:
        type: string
      university_type:
        type: string
      university_name:
        type: string
      university_location:
        type: string
      university_semester:
        type: integer
        format: int64
      university_student_number:
        type: string
      university_educational_achievement:
        type: string
      university_graduation:
        type: string
      university_after:
        type: string
      voluntary_type:
        type: string
      voluntary_name:
        type: string
      voluntary_location:
        type: string
      voluntary_educational_achievement:
        type: string
      voluntary_after:
        type: string
      apprenticeship_type:
        type: string
      apprenticeship_name:
        type: string
      apprenticeship_location:
        type: string
      apprenticeship_year:
        type: integer
        format: int64
      apprenticeship_educational_achievement:
        type: string
      apprenticeship_graduation:
        type: string
      apprenticeship_after:
        type: string
      else_name:
        type: string
      else_location:
        type: string
      else_educational_achievement:
        type: string
      else_after:
        type: string
  milestonePatch:
    type: object
    properties:
      status_from:
        type: string
      status_until:
        type: string
      school_type:
        type: string
      school_name:
        type: string
      school_location:
        type: string
      school_grade:
        type: integer
        format: int64
      school_graduation:
        type: string
      school_after:
        type: string
      university_course:
        type: string
      university_type:
        type: string
      university_name:
        type: string
      university_location:
        type: string
      university_semester:
        type: integer
        format: int64
      university_student_number:
        type: string
      university_educational_achievement:
        type: string
      university_graduation:
        type: string
      university_after:
        type: string
      voluntary_type:
        type: string
      voluntary_name:
        type: string
      voluntary_location:
        type: string
      voluntary_educational_achievement:
        type: string
      voluntary_after:
        type: string
      apprenticeship_type:
        type: string
      apprenticeship_name:
        type: string
      apprenticeship_location:
        type: string
      apprenticeship_year:
        type: integer
        format: int64
      apprenticeship_educational_achievement:
        type: string
      apprenticeship_graduation:
        type: string
      apprenticeship_after:
        type: string
      else_name:
        type: string
      else_location:
        type: string
      else_educational_achievement:
        type: string
      else_after:
        type: string

  milestoneCreate:
    type: object
    properties:
      type:
        type: integer
        format: int64
      status_from:
        type: string
      status_until:
        type: string
      school_type:
        type: string
      school_name:
        type: string
      school_location:
        type: string
      school_grade:
        type: integer
        format: int64
      school_graduation:
        type: string
      school_after:
        type: string
      university_course:
        type: string
      university_type:
        type: string
      university_name:
        type: string
      university_location:
        type: string
      university_semester:
        type: integer
        format: int64
      university_student_number:
        type: string
      university_educational_achievement:
        type: string
      university_graduation:
        type: string
      university_after:
        type: string
      voluntary_type:
        type: string
      voluntary_name:
        type: string
      voluntary_location:
        type: string
      voluntary_educational_achievement:
        type: string
      voluntary_after:
        type: string
      apprenticeship_type:
        type: string
      apprenticeship_name:
        type: string
      apprenticeship_location:
        type: string
      apprenticeship_year:
        type: integer
        format: int64
      apprenticeship_educational_achievement:
        type: string
      apprenticeship_graduation:
        type: string
      apprenticeship_after:
        type: string
      else_name:
        type: string
      else_location:
        type: string
      else_educational_achievement:
        type: string
      else_after:
        type: string
      is_key:
        type: boolean
  memberTypes:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      priority:
        type: integer
      extended_list:
        type: boolean
      hidden:
        type: boolean
      scope:
        type: string
  checkinlog:
    type: array
    items:
      properties:
        event_id:
          type: integer
          format: int64
          description: event id
        parent:
          type: integer
          default: null
          description: if type = BLOCK, related BLOCKEVENT id
        type:
          type: string
          description: event type
          enum:
            - BLOCKEVENT
            - SINGLEEVENT
            - BLOCK
        title:
          type: string
          description: block title
        blocks:
          type: integer
          default: null
          description: \[only appears when type = BLOCKEVENT\] if type = BLOCKEVENT, number of all non-canceled blocks included
        block_index:
          type: integer
          description: block index (related to all blocks)
          default: null
        block_day:
          type: integer
          description: block day
          default: null
        checkout_required:
          type: boolean
          default: false
        checkin_ignore_offsets:
          type: boolean
          default: true
          description: whether there are restrictions for allowed times to checkin/checkout (implies if some checkin errors can occur or not)
        startdate:
          type: integer
          format: int64
          description: start date (as JS timestamp)
        enddate:
          type: integer
          format: int64
          description: end date (as JS timestamp)
        checkin_required:
          type: boolean
          default: true
        checkin_state:
          type: string
          description: checkin state (order by successfuls)
          enum:
            - CHECKIN
            - TOOKPART
            - SICKCALL
            - TOOEARLY
            - TOOLATE
        checkin_date:
          type: integer
          format: int64
          description: checkin state date
        checkout_state:
          type: string
          description: checkout state (order by successfuls)
          enum:
            - CHECKOUT
            - TOOEARLY
            - TOOLATE
        checkout_date:
          type: integer
          format: int64
          description: checkout state date
  timesheet:
    type: object
    description: time sheet for selected participant (empty response if there are no time sheet relevant courses in current semester)
    properties:
      obligable:
        type: array
        description: list of events of type "obligable"
        items:
          properties:
            event_id:
              type: integer
              format: int64
              description: event id
            type:
              type: string
              description: event type
              enum:
                - BLOCKEVENT
                - SINGLEEVENT
            title:
              type: string
              description: block title
            startdate:
              type: integer
              format: int64
              description: start date (as JS timestamp); when block event, then start date of earliest block
            enddate:
              type: integer
              format: int64
              description: end date (as JS timestamp); when block event, then end date of latest block
            checkin_required:
              type: boolean
              default: true
            checkout_required:
              type: boolean
              default: false
            checkin_ignore_offsets:
              type: boolean
              default: true
              description: whether there are restrictions for allowed times to checkin/checkout (implies if some checkin errors can occur or not)
            blocks:
              type: integer
              description: number of all blocks (1 when type is SINGLEEVENT)
            successful:
              type: integer
              description: number of successfully finished blocks
            failed:
              type: integer
              description: number of failed blocks
            upcoming:
              type: integer
              description: number of upcoming blocks
            passedfrom:
              type: integer
              description: course passed from [%] (default is 80%)
              default: 80
            timesheet:
              type: string
              description: course type, VOLUNTARY or OBLIGABLE
              enum:
                - OBLIGABLE
                - VOLUNTARY
            checkins:
              type: array
              items:
                properties:
                  event_id:
                    type: integer
                    format: int64
                    description: event id
                  parent:
                    type: integer
                    default: null
                    description: if type = BLOCK, related BLOCKEVENT id
                  block_title:
                    type: string
                    description: block title
                  block_index:
                    type: integer
                    description: block index (related to all blocks)
                    default: null
                  block_day:
                    type: integer
                    description: block day
                    default: null
                  startdate:
                    type: integer
                    format: int64
                    description: block start date (as JS timestamp)
                  enddate:
                    type: integer
                    format: int64
                    description: block start date (as JS timestamp)
                  checkin_state:
                    type: string
                    description: checkin state (order by successfuls)
                    enum:
                      - CHECKIN
                      - TOOKPART
                      - SICKCALL
                      - TOOEARLY
                      - TOOLATE
                  checkin_date:
                    type: integer
                    format: int64
                    description: checkin state date
                  checkout_state:
                    type: string
                    description: checkout state (order by successfuls)
                    enum:
                      - CHECKOUT
                      - TOOEARLY
                      - TOOLATE
                  checkout_date:
                    type: integer
                    format: int64
                    description: checkout state date
      voluntary:
        type: array
        description: list of events of type "voluntary"
        items:
          description: specs see obligable
  dictionary:
    type: object
    properties:
      filter:
        type: string
  messageSend:
    type: object
    properties:
      content:
        type: string
  messageGet:
    type: object
    properties:
      id:
        type: integer
      read:
        type: boolean
        description: flag if conversation root message and every reply from BTU side was read by client
      closed:
        type: boolean
        description: conversation was closed by BTU
      content:
        type: string
      createdate:
        type: string
      createtimestamp:
        type: integer
        description: unix timestamp (seconds)
      createdby:
        type: string
        enum:
          - API
          - BACKEND_USER
        description: API (user) or BACKEND_USER (BTU)
      replies:
        type: integer
        description: sum of all replies
      latest_reply:
        type: string
        description: date of latest reply
      latest_reply_read:
        type: boolean
        description: latest reply was read
      hash:
        type: string
        description: sha1 hash of whole conversation to quickly identy changes
      conversation:
        type: array
        description: all replies ordered by create date descending
        items:
          properties:
            id:
              type: integer
              description: id of the reply message
            read:
              type: boolean
            content:
              type: string
            createdate:
              type: string
            createtimestamp:
              type: integer
              description: unix timestamp (seconds)
            createdby:
              type: string
              enum:
                - API
                - BACKEND_USER
              description: API (user) or BACKEND_USER (BTU)
  messageRead:
    type: object
    properties:
      id:
        type: integer
        description: id of the conversation (root message)
  messagesUnread:
    type: object
    properties:
      unread:
        type: integer
        description: number of unread conversations
  messageConversations:
    type:
      array
    items:
      properties:
        id:
          type: integer
          description: conversation id (root message)
        read:
          type: boolean
          description: flag if conversation root message and every reply from BTU side was read by client
        content:
          type: string
          description: content of the initial conversation message
        createdate:
          type: string
          description: create timestamp of the initial conversation (root message)
        latest_date:
          type: string
          description: timestamp of the latest reply (falls back to timestamp of root message, when there is no reply)
        createdby:
          type: string
          enum:
            - API
            - BACKEND_USER
          description: create user of initial conversation (root message); API (user) or BACKEND_USER (BTU)
        closed:
          type: boolean
          description: conversation was closed by BTU
        hash:
          type: string
          description: sha1 hash of whole conversation to quickly identy changes
        replies:
          type: integer
          description: sum of all replies
        latest_reply:
          type: array
          items:
            properties:
              read:
                type: boolean
                description: latest reply was read
              content:
                type: string
                description: latest reply content
              createdate:
                type: string
                description: date of latest reply
              createtimestamp:
                type: integer
                description: timestamp of latest reply
              createdby:
                type: string
                description: create user of reply; API (user) or BACKEND_USER (BTU)
  notifications:
    type: array
    items:
      properties:
        id:
          type: integer
          description: notification id
        linkid:
          type: integer
          description: id of notification - participant connection
        type:
          type: string
          enum:
            - CUSTOM
            - EVENT_REMINDER
            - CONSULTING_REMINDER
        read:
          type: boolean
          description: read state
        related_id:
          type: integer
          description: if type is EVENT_REMINDER or CONSULTING_REMINDER thgis field stores the related event id / consulting id
        content:
          type: string
          description: notification content/text
        createdate:
          type: string
          description: date of creation
        createtimestamp:
          type: integer
          description: timestamp of creation
        #        createdby:
        #          type: string
        #          description: user that created notification (SYSTEM when system generated)
        updatedate:
          type: string
          description: date of last update
          default: null
        updatetimestamp:
          type: integer
          description: timestamp of last update
          default: null
  #        updatedby:
  #          type: string
  #          description: user that performed last change to notification
  #          default: null
  notificationsUnread:
    type: object
    properties:
      unread:
        type: integer
        description: number of unread notifications
  notificationRead:
    type: object
    properties:
      id:
        type: integer
        description: id of the notification to mark read
  consultingOverview:
    type: object
    properties:
      title:
        type: string
        description: bubble title (consulting menu)
      headline:
        type: string
        description: title of info-card
      description:
        type: string
        description: intro text inside info-card / description
      facts:
        type: array
        description: pairs of label, value
        items:
          properties:
            label:
              type: string
            value:
              type: string
      overlay:
        type: string
        description: overlay content
  consultingDateGet:
    type: object
    properties:
      id:
        type: integer
        description: id of consulting menu item
      title:
        type: string
        description: title of consulting menu item (= menuname)
      date:
        type: string
        description: format DD.MM.YYYY
      time:
        type: string
        description: format HH\:II
      location:
        type: string
        description: location selection
      consultant:
        type: string
        description: consultant name
      notice:
        type: string
        description: free notice
      article:
        type: object
        description: article structure
        properties:
          type:
            type: string
            description: should be "info-card" always
          id:
            type: integer
            description: id of article
          value:
            type: object
            properties:
              menuname:
                type: object
                properties:
                  value:
                    type: string
                    description: name of the bubble
              title:
                type: object
                properties:
                  value:
                    type: string
                    description: headline of info-card
              desc:
                type: object
                properties:
                  value:
                    type: string
                    description: description of info-card
              facts:
                type: array
                description: pairs of label, value
                items:
                  properties:
                    label:
                      type: string
                    value:
                      type: string
              overlay:
                type: object
                properties:
                  value:
                    type: string
                    description: overlay content (when clicking request button)
  consultingDateAdd:
    type: object
    properties:
      id:
        type: integer
        description: id of consulting menu item
      title:
        type: string
        description: title of consulting menu item (= menuname)
      date:
        type: string
        description: format DD.MM.YYYY
      time:
        type: string
        description: format HH\:II
      location:
        type: string
        description: location selection
      consultant:
        type: string
        description: consultant name
      notice:
        type: string
        description: free notice
  eventCategories:
    type: object
    items:
      properties:
        name:
          type: string
          description: name of main category
  event:
    type: object
    description: recursive array/object mix (fields specs TODO)
  code:
    type: object
    properties:
      code:
        type: string
      path:
        type: string
        description: (optional) If provided, the code is checked against the given path. If the code refers to an event or sub-path inside the given path, return ist TRUE.
  clang:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      code:
        type: string
      default:
        type: boolean
  article:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      content:
        type: string
      clang:
        $ref: '#/definitions/clang'
