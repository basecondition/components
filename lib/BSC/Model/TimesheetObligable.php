<?php
/**
 * TimesheetObligable
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSC\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BSC API
 *
 * BSC API
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSC\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the TimesheetObligable model.
 *
 * @package BSC\Model
 * @author  Swagger Codegen team
 */
class TimesheetObligable 
{
        /**
     * event id
     *
     * @var int|null
     * @SerializedName("event_id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $eventId;

    /**
     * event type
     *
     * @var string|null
     * @SerializedName("type")
     * @Assert\Choice({ "BLOCKEVENT", "SINGLEEVENT" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $type;

    /**
     * block title
     *
     * @var string|null
     * @SerializedName("title")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $title;

    /**
     * start date (as JS timestamp); when block event, then start date of earliest block
     *
     * @var int|null
     * @SerializedName("startdate")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $startdate;

    /**
     * end date (as JS timestamp); when block event, then end date of latest block
     *
     * @var int|null
     * @SerializedName("enddate")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $enddate;

    /**
     * @var bool|null
     * @SerializedName("checkin_required")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $checkinRequired;

    /**
     * @var bool|null
     * @SerializedName("checkout_required")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $checkoutRequired;

    /**
     * whether there are restrictions for allowed times to checkin/checkout (implies if some checkin errors can occur or not)
     *
     * @var bool|null
     * @SerializedName("checkin_ignore_offsets")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $checkinIgnoreOffsets;

    /**
     * number of all blocks (1 when type is SINGLEEVENT)
     *
     * @var int|null
     * @SerializedName("blocks")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $blocks;

    /**
     * number of successfully finished blocks
     *
     * @var int|null
     * @SerializedName("successful")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $successful;

    /**
     * number of failed blocks
     *
     * @var int|null
     * @SerializedName("failed")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $failed;

    /**
     * number of upcoming blocks
     *
     * @var int|null
     * @SerializedName("upcoming")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $upcoming;

    /**
     * course passed from [%] (default is 80%)
     *
     * @var int|null
     * @SerializedName("passedfrom")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $passedfrom;

    /**
     * course type, VOLUNTARY or OBLIGABLE
     *
     * @var string|null
     * @SerializedName("timesheet")
     * @Assert\Choice({ "OBLIGABLE", "VOLUNTARY" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $timesheet;

    /**
     * @var BSC\Model\TimesheetCheckins[]|null
     * @SerializedName("checkins")
     * @Assert\All({
     *   @Assert\Type("BSC\Model\TimesheetCheckins")
     * })
     * @Type("array<BSC\Model\TimesheetCheckins>")
     */
    protected $checkins;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->eventId = isset($data['eventId']) ? $data['eventId'] : null;
        $this->type = isset($data['type']) ? $data['type'] : null;
        $this->title = isset($data['title']) ? $data['title'] : null;
        $this->startdate = isset($data['startdate']) ? $data['startdate'] : null;
        $this->enddate = isset($data['enddate']) ? $data['enddate'] : null;
        $this->checkinRequired = isset($data['checkinRequired']) ? $data['checkinRequired'] : true;
        $this->checkoutRequired = isset($data['checkoutRequired']) ? $data['checkoutRequired'] : false;
        $this->checkinIgnoreOffsets = isset($data['checkinIgnoreOffsets']) ? $data['checkinIgnoreOffsets'] : true;
        $this->blocks = isset($data['blocks']) ? $data['blocks'] : null;
        $this->successful = isset($data['successful']) ? $data['successful'] : null;
        $this->failed = isset($data['failed']) ? $data['failed'] : null;
        $this->upcoming = isset($data['upcoming']) ? $data['upcoming'] : null;
        $this->passedfrom = isset($data['passedfrom']) ? $data['passedfrom'] : null;
        $this->timesheet = isset($data['timesheet']) ? $data['timesheet'] : null;
        $this->checkins = isset($data['checkins']) ? $data['checkins'] : null;
    }

    /**
     * Gets eventId.
     *
     * @return int|null
     */
    public function getEventId()
    {
        return $this->eventId;
    }

    /**
     * Sets eventId.
     *
     * @param int|null $eventId  event id
     *
     * @return $this
     */
    public function setEventId($eventId = null)
    {
        $this->eventId = $eventId;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param string|null $type  event type
     *
     * @return $this
     */
    public function setType($type = null)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Gets title.
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Sets title.
     *
     * @param string|null $title  block title
     *
     * @return $this
     */
    public function setTitle($title = null)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Gets startdate.
     *
     * @return int|null
     */
    public function getStartdate()
    {
        return $this->startdate;
    }

    /**
     * Sets startdate.
     *
     * @param int|null $startdate  start date (as JS timestamp); when block event, then start date of earliest block
     *
     * @return $this
     */
    public function setStartdate($startdate = null)
    {
        $this->startdate = $startdate;

        return $this;
    }

    /**
     * Gets enddate.
     *
     * @return int|null
     */
    public function getEnddate()
    {
        return $this->enddate;
    }

    /**
     * Sets enddate.
     *
     * @param int|null $enddate  end date (as JS timestamp); when block event, then end date of latest block
     *
     * @return $this
     */
    public function setEnddate($enddate = null)
    {
        $this->enddate = $enddate;

        return $this;
    }

    /**
     * Gets checkinRequired.
     *
     * @return bool|null
     */
    public function isCheckinRequired()
    {
        return $this->checkinRequired;
    }

    /**
     * Sets checkinRequired.
     *
     * @param bool|null $checkinRequired
     *
     * @return $this
     */
    public function setCheckinRequired($checkinRequired = null)
    {
        $this->checkinRequired = $checkinRequired;

        return $this;
    }

    /**
     * Gets checkoutRequired.
     *
     * @return bool|null
     */
    public function isCheckoutRequired()
    {
        return $this->checkoutRequired;
    }

    /**
     * Sets checkoutRequired.
     *
     * @param bool|null $checkoutRequired
     *
     * @return $this
     */
    public function setCheckoutRequired($checkoutRequired = null)
    {
        $this->checkoutRequired = $checkoutRequired;

        return $this;
    }

    /**
     * Gets checkinIgnoreOffsets.
     *
     * @return bool|null
     */
    public function isCheckinIgnoreOffsets()
    {
        return $this->checkinIgnoreOffsets;
    }

    /**
     * Sets checkinIgnoreOffsets.
     *
     * @param bool|null $checkinIgnoreOffsets  whether there are restrictions for allowed times to checkin/checkout (implies if some checkin errors can occur or not)
     *
     * @return $this
     */
    public function setCheckinIgnoreOffsets($checkinIgnoreOffsets = null)
    {
        $this->checkinIgnoreOffsets = $checkinIgnoreOffsets;

        return $this;
    }

    /**
     * Gets blocks.
     *
     * @return int|null
     */
    public function getBlocks()
    {
        return $this->blocks;
    }

    /**
     * Sets blocks.
     *
     * @param int|null $blocks  number of all blocks (1 when type is SINGLEEVENT)
     *
     * @return $this
     */
    public function setBlocks($blocks = null)
    {
        $this->blocks = $blocks;

        return $this;
    }

    /**
     * Gets successful.
     *
     * @return int|null
     */
    public function getSuccessful()
    {
        return $this->successful;
    }

    /**
     * Sets successful.
     *
     * @param int|null $successful  number of successfully finished blocks
     *
     * @return $this
     */
    public function setSuccessful($successful = null)
    {
        $this->successful = $successful;

        return $this;
    }

    /**
     * Gets failed.
     *
     * @return int|null
     */
    public function getFailed()
    {
        return $this->failed;
    }

    /**
     * Sets failed.
     *
     * @param int|null $failed  number of failed blocks
     *
     * @return $this
     */
    public function setFailed($failed = null)
    {
        $this->failed = $failed;

        return $this;
    }

    /**
     * Gets upcoming.
     *
     * @return int|null
     */
    public function getUpcoming()
    {
        return $this->upcoming;
    }

    /**
     * Sets upcoming.
     *
     * @param int|null $upcoming  number of upcoming blocks
     *
     * @return $this
     */
    public function setUpcoming($upcoming = null)
    {
        $this->upcoming = $upcoming;

        return $this;
    }

    /**
     * Gets passedfrom.
     *
     * @return int|null
     */
    public function getPassedfrom()
    {
        return $this->passedfrom;
    }

    /**
     * Sets passedfrom.
     *
     * @param int|null $passedfrom  course passed from [%] (default is 80%)
     *
     * @return $this
     */
    public function setPassedfrom($passedfrom = null)
    {
        $this->passedfrom = $passedfrom;

        return $this;
    }

    /**
     * Gets timesheet.
     *
     * @return string|null
     */
    public function getTimesheet()
    {
        return $this->timesheet;
    }

    /**
     * Sets timesheet.
     *
     * @param string|null $timesheet  course type, VOLUNTARY or OBLIGABLE
     *
     * @return $this
     */
    public function setTimesheet($timesheet = null)
    {
        $this->timesheet = $timesheet;

        return $this;
    }

    /**
     * Gets checkins.
     *
     * @return BSC\Model\TimesheetCheckins[]|null
     */
    public function getCheckins()
    {
        return $this->checkins;
    }

    /**
     * Sets checkins.
     *
     * @param BSC\Model\TimesheetCheckins[]|null $checkins
     *
     * @return $this
     */
    public function setCheckins(TimesheetCheckins $checkins = null)
    {
        $this->checkins = $checkins;

        return $this;
    }
}


